// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  customer
}

enum VacancyLevel {
  youngApprentice
  internship
  trainee
  auxiliary
  assistant
  junior
  pleno
  senior
  supervisor
  coordinator
  manager
  director
  notApplicable
}

enum OperatingModel {
  remote
  hybrid
  presential
}

enum ContractType {
  internship
  youngApprentice
  clt
  pj
}

enum Gender {
  male
  female
  indistinct
}

enum EducationLevel {
  fundamental
  medium
  technical
  superior
  postGraduation
  master
  doctorate
}

enum VacancyStatus {
  waiting
  open
  canceled
  finished
}

enum CandidateStatus {
  stored
  applied
  hired
}

enum ApplicationStatus {
  waiting
  notContinued
  rejectedByRecruiter
  approvedByRecruiter
  standby
  rejectedByCompany
  approvedByCompany
}

enum InterviewType {
  recruiter
  company
}

enum InterviewStatus {
  scheduled
  canceled
  standby
  approved
  rejected
}

enum MaritalStatus {
  single
  married
  divorced
  widowed
}

model users {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique()
  authId    String     @unique()
  role      UserRole
  companyId String?    @db.ObjectId
  company   companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model companies {
  id                  String         @id @default(auto()) @map("_id") @db.ObjectId
  cnpj                String         @unique()
  name                String
  fantasyName         String
  email               String
  phone               String
  contactName         String
  contactRole         String
  cep                 String
  streetName          String
  streetNumber        Int?
  district            String
  city                String
  uf                  String
  minComission        Int
  maxComission        Int
  comissionPercentage Int
  users               users[]
  vacancies           vacancies[]
  interviews          interviews[]
  applications        applications[]
}

model vacancies {
  id                                 String          @id @default(auto()) @map("_id") @db.ObjectId
  title                              String
  department                         String
  locationCep                        String?
  operatingModel                     OperatingModel
  contractType                       ContractType
  description                        String
  additionalInfo                     String?
  level                              VacancyLevel
  minSalary                          Float
  maxSalary                          Float
  hasVariableComissions              Boolean         @default(false)
  responsibleName                    String
  responsiblePhone                   String
  responsibleEmail                   String
  reasonForOpening                   String
  isSecret                           Boolean         @default(false)
  vacanciesAmount                    Int
  subordinatesAmount                 Int?
  workingSchedule                    String
  needsTravel                        Boolean         @default(false)
  needsExtraHours                    Boolean         @default(false)
  minAge                             Int
  maxAge                             Int
  gender                             Gender
  educationLevel                     EducationLevel?
  benefits                           String[]
  otherBenefits                      String?
  minExperience                      Int?
  desirableExperience                Int?
  necessaryRequirements              String
  desirableRequirements              String?
  willApplicantBeTested              Boolean         @default(false)
  alignmentMeetingDate               DateTime?
  suggestionsOfAlignmentMeetingDates DateTime[]
  createdAt                          DateTime
  openedAt                           DateTime?
  finishedAt                         DateTime?
  canceledAt                         DateTime?
  isReposition                       Boolean         @default(false)
  status                             VacancyStatus
  companyId                          String          @db.ObjectId
  company                            companies       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  interviews                         interviews[]
  applications                       applications[]
}

model candidates {
  id                         String          @id @default(auto()) @map("_id") @db.ObjectId
  name                       String
  email                      String          @unique()
  phone                      String
  linkedin                   String?
  resume                     String
  psycologicalTest           String?
  candidatesForm             String?
  salaryExpected             Float?
  birthDate                  DateTime
  gender                     Gender
  educationLevel             EducationLevel
  graduationCourse           String?
  cpf                        String          @unique()
  rg                         String          @unique()
  cep                        String?
  streetNumber               Int?
  complement                 String?
  streetName                 String?
  district                   String?
  city                       String?
  uf                         String?
  maritalStatus              MaritalStatus
  childrenAmount             Int
  lastSalary                 Float?
  lastCompany                String?
  lastPosition               String?
  isRegularWithGovernmentTax Boolean         @default(true)
  hasCriminalRecord          Boolean         @default(false)
  sentenceServed             Boolean         @default(false)
  courtCases                 String[]
  portfolio                  String?
  isPortfolioFile            Boolean?        @default(false)
  status                     CandidateStatus
  createdAt                  DateTime

  interviews   interviews[]
  applications applications[]
}

model applications {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId
  date               DateTime
  positivePoints     String?
  negativePoints     String?
  status             ApplicationStatus
  hiredAt            DateTime?
  recruiterComission Float?
  finalSalary        Float?

  candidateId String     @db.ObjectId
  candidate   candidates @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  vacancyId   String     @db.ObjectId
  vacancy     vacancies  @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  companyId   String     @db.ObjectId
  company     companies  @relation(fields: [companyId], references: [id], onDelete: Cascade)

  interviews interviews[]

  @@unique([candidateId, vacancyId])
}

model interviews {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime
  date      DateTime
  details   String?
  aiSummary String?
  relatory  String?
  type      InterviewType
  status    InterviewStatus

  companyId     String       @db.ObjectId
  company       companies    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  candidateId   String       @db.ObjectId
  candidate     candidates   @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  vacancyId     String       @db.ObjectId
  vacancy       vacancies    @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  applicationId String       @db.ObjectId
  application   applications @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@unique([candidateId, vacancyId, type])
}
