// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  customer
}

model users {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String     @unique()
  authId    String     @unique()
  role      UserRole
  companyId String?    @db.ObjectId
  company   companies? @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model companies {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  cnpj         String       @unique()
  name         String
  fantasyName  String
  email        String
  phone        String
  contactName  String
  contactRole  String
  cep          String
  streetName   String
  streetNumber Int?
  district     String
  city         String
  uf           String
  users        users[]
  vacancies    vacancies[]
  candidates   candidates[]
  interviews   interviews[]
}

enum VacancyStatus {
  waiting
  open
  canceled
  finished
}

enum VacancyLevel {
  youngApprentice
  internship
  trainee
  assistant
  junior
  pleno
  senior
  coordinator
  manager
  director
  notApplicable
}

enum OperatingModel {
  remote
  hybrid
  presential
}

enum ContractType {
  internship
  youngApprentice
  clt
  pj
}

enum Gender {
  male
  female
  indistinct
}

enum EducationLevel {
  fundamental
  medium
  superior
  postGraduation
  master
  doctorate
}

model vacancies {
  id                                 String          @id @default(auto()) @map("_id") @db.ObjectId
  title                              String
  department                         String
  locationCep                        String?
  operatingModel                     OperatingModel
  contractType                       ContractType
  description                        String
  additionalInfo                     String?
  level                              VacancyLevel
  minSalary                          Float
  maxSalary                          Float
  hasVariableComissions              Boolean         @default(false)
  responsibleName                    String
  responsiblePhone                   String
  responsibleEmail                   String
  reasonForOpening                   String
  isSecret                           Boolean         @default(false)
  vacanciesAmount                    Int
  subordinatesAmount                 Int?
  workingSchedule                    String
  needsTravel                        Boolean         @default(false)
  needsExtraHours                    Boolean         @default(false)
  minAge                             Int
  maxAge                             Int
  gender                             Gender
  educationLevel                     EducationLevel?
  benefits                           String[]
  otherBenefits                      String?
  minExperience                      Int?
  desirableExperience                Int?
  necessaryRequirements              String
  desirableRequirements              String?
  willApplicantBeTested              Boolean         @default(false)
  recruiterComission                 Float
  alignmentMeetingDate               DateTime?
  suggestionsOfAlignmentMeetingDates DateTime[]
  createdAt                          DateTime
  openedAt                           DateTime?
  finishedAt                         DateTime?
  canceledAt                         DateTime?
  isReposition                       Boolean         @default(false)
  status                             VacancyStatus
  companyId                          String          @db.ObjectId
  company                            companies       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  candidates                         candidates[]
  interviews                         interviews[]
}

enum CandidateStatus {
  applied
  approvedForInterview
  rejectedForInterview
  rejectedByRecruiter
  approvedByRecruiter
  rejectedByCompany
  approvedByCompany
  hired
}

model candidates {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String
  phone          String
  linkedin       String
  resume         String
  salaryExpected Float
  status         CandidateStatus
  positivePoints String?
  negativePoints String?
  createdAt      DateTime
  companyId      String          @db.ObjectId
  company        companies       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  vacancyId      String          @db.ObjectId
  vacancy        vacancies       @relation(fields: [vacancyId], references: [id], onDelete: Cascade)
  interviews     interviews[]
}

enum InterviewType {
  recruiter
  company
}

enum InterviewStatus {
  scheduled
  canceled
  approved
  rejected
}

model interviews {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  details     String
  type        InterviewType
  status      InterviewStatus
  companyId   String          @db.ObjectId
  company     companies       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  candidateId String          @db.ObjectId
  candidate   candidates      @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  vacancyId   String          @db.ObjectId
  vacancy     vacancies       @relation(fields: [vacancyId], references: [id], onDelete: Cascade)

  @@unique([candidateId, vacancyId, type])
}
